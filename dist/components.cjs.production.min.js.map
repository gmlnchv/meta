{"version":3,"file":"components.cjs.production.min.js","sources":["../src/components/Token.tsx","../src/theme/index.ts","../src/theme/components/token.ts","../src/provider/index.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverBody,\n  Text,\n} from \"@chakra-ui/react\"\n\nimport { cx } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface TokenProps\n  extends HTMLChakraProps<\"span\">,\n    ThemingProps<\"Token\"> {\n  value: string\n}\n\n/**\n * Component used to display design tokens or variables.\n */\nexport const Token = forwardRef<TokenProps, \"span\">((props, ref) => {\n  const styles = useStyleConfig(\"Token\", props)\n  const { className, value, ...rest } = omitThemingProps(props)\n\n  return (\n    <Popover placement=\"top\" variant=\"responsive\" trigger=\"hover\" flip={false}>\n      <PopoverTrigger>\n        <chakra.span\n          ref={ref}\n          className={cx(\"dp-token\", props.className)}\n          {...rest}\n          __css={{\n            display: \"inline-block\",\n            whiteSpace: \"nowrap\",\n            verticalAlign: \"middle\",\n            ...styles,\n          }}\n        />\n      </PopoverTrigger>\n      <PopoverContent w=\"auto\">\n        <PopoverBody py={1} textAlign=\"center\">\n          <Text fontSize=\"xs\" my={0} color=\"gray.600\">\n            {value}\n          </Text>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n})\n","import { extendTheme } from \"@chakra-ui/react\"\nimport Token from \"./components/token\"\n\nexport default extendTheme({\n  components: {\n    Token,\n  },\n})\n","export default {\n  baseStyle: {\n    px: 3,\n    py: 1,\n    cursor: \"pointer\",\n    fontSize: \"xs\",\n    fontWeight: \"medium\",\n    border: \"1px\",\n    color: \"gray.600\",\n    borderColor: \"gray.200\",\n    borderRadius: \"full\",\n  },\n}\n","import * as React from \"react\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { ChakraProviderProps } from \"@chakra-ui/provider\"\n\nimport theme from \"../theme\"\n\nexport const ThemeProvider: React.FC<ChakraProviderProps> = (props) => {\n  return <ChakraProvider resetCSS={false} {...props} theme={theme} />\n}\n"],"names":["Token","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","value","rest","React","Popover","placement","variant","trigger","flip","PopoverTrigger","chakra","span","className","cx","__css","display","whiteSpace","verticalAlign","PopoverContent","w","PopoverBody","py","textAlign","Text","fontSize","my","color","extendTheme","components","baseStyle","px","cursor","fontWeight","border","borderColor","borderRadius","ChakraProvider","resetCSS","theme"],"mappings":"iaA4BaA,EAAQC,cAA+B,SAACC,EAAOC,OACpDC,EAASC,iBAAe,QAASH,KACDI,mBAAiBJ,GAApCK,IAAAA,MAAUC,iJAG3BC,gBAACC,WAAQC,UAAU,MAAMC,QAAQ,aAAaC,QAAQ,QAAQC,MAAM,GAClEL,gBAACM,sBACCN,gBAACO,SAAOC,oBACNd,IAAKA,EACLe,UAAWC,KAAG,WAAYjB,EAAMgB,YAC5BV,GACJY,SACEC,QAAS,eACTC,WAAY,SACZC,cAAe,UACZnB,OAITK,gBAACe,kBAAeC,EAAE,QAChBhB,gBAACiB,eAAYC,GAAI,EAAGC,UAAU,UAC5BnB,gBAACoB,QAAKC,SAAS,KAAKC,GAAI,EAAGC,MAAM,YAC9BzB,WC/CE0B,cAAY,CACzBC,WAAY,CACVlC,MCLW,CACbmC,UAAW,CACTC,GAAI,EACJT,GAAI,EACJU,OAAQ,UACRP,SAAU,KACVQ,WAAY,SACZC,OAAQ,MACRP,MAAO,WACPQ,YAAa,WACbC,aAAc,kCCJ0C,SAACvC,UACpDO,gBAACiC,gCAAeC,UAAU,GAAWzC,GAAO0C,MAAOA"}